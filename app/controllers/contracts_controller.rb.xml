class ContractsController < ApplicationController
  before_filter :authorized?, :only => [:new, :create, :edit, :update, :destroy]


  # GET /contracts
  # GET /contracts.xml
  def index
    if params[:format] == "xml"
      if params[:serial_search]
        @contracts = Contract.serial_search(params[:serial_search])      
      else
        @contracts = Contract.short_list(current_user.sugar_team_ids)
      end
    end
    respond_to do |format|
      store_location
      format.html # index.html.haml
      format.xls  #Respond as Excel Doc
      format.xml  ##{ render :xml => @contracts }
    end
  end

  # GET /contracts/1
  # GET /contracts/1.xml
  def show
    logger.error "******* Contracts controller show method"
    @contract = Contract.find(params[:id])
    @comments = @contract.comments.sort {|x,y| y.created_at <=> x.created_at}
    @line_items = @contract.line_items
    @replaces = @contract.predecessors
    @replaced_by = @contract.successors
    @comment = Comment.new
    
    respond_to do |format|
      format.html # show.html.haml
      format.xml  { render :xml => @contract }
    end
  end

  # GET /contracts/new
  # GET /contracts/new.xml
  def new
    @contract = Contract.new
    @sugar_accts = SugarAcct.find(:all, :select => "id, name", :order => "name")
    @sales_offices =  SugarTeam.dropdown_list(current_user.sugar_team_ids)
    @support_offices = @sales_offices
    @pay_terms = Dropdown.payment_terms_list
    @platform = Dropdown.platform_list
    @reps = User.user_list
    @types_hw = Dropdown.support_type_list_hw
    @types_sw = Dropdown.support_type_list_sw
    @contract_types = SugarContractType.find(:all, :select => "id, name", :conditions => "deleted = 0", :order => "list_order")
    @replaces = []
    @replaced_by = []
   
    respond_to do |format|
      format.html # new.html.erb
      format.xml  { render :xml => @contract }
    end
  end

  # GET /contracts/1/edit
  def edit
    @contract = Contract.find(params[:id])
    @sugar_accts = SugarAcct.find(:all, :select => "id, name", :conditions => "deleted = 0", :order => "name")
    @sales_offices =  SugarTeam.dropdown_list(current_user.sugar_team_ids)
    @support_offices = @sales_offices
    @pay_terms = Dropdown.payment_terms_list
    @platform = Dropdown.platform_list
    @reps = User.user_list
    @types_hw = Dropdown.support_type_list_hw
    @types_sw = Dropdown.support_type_list_sw
    @contract_types = SugarContractType.find(:all, :select => "id, name", :conditions => "deleted = 0", :order => "list_order")
    @replaces = Contract.find(:all, :conditions => "account_name = '#{@contract.account_name}' AND id <> #{params[:id]}")
    @replaced_by = @replaces

  end

  # POST /contracts
  # POST /contracts.xml
  def create
    logger.info "******* Contracts controller create method"
    @contract = Contract.new(params[:contract])

    respond_to do |format|
      if @contract.save
        flash[:notice] = 'Contract was successfully created.'
        format.html { redirect_to(@contract) }
        format.xml  { render :xml => @contract, :status => :created, :location => @contract }
      else
        format.html { render :action => "new" }
        format.xml  { render :xml => @contract.errors, :status => :unprocessable_entity }
      end
    end
  end

  # PUT /contracts/1
  # PUT /contracts/1.xml
  def update
    params[:contract][:predecessor_ids] ||= []
    params[:contract][:successor_ids] ||= []
    @contract = Contract.find(params[:id])

    respond_to do |format|
      if @contract.update_attributes(params[:contract])
        flash[:notice] = 'Contract was successfully updated.'
        format.html { redirect_to(@contract) }
        format.xml  { head :ok }
      else
        format.html { render :action => "edit" }
        format.xml  { render :xml => @contract.errors, :status => :unprocessable_entity }
      end
    end
  end

  # DELETE /contracts/1
  # DELETE /contracts/1.xml
  def destroy
    @contract = Contract.find(params[:id])
    @contract.destroy
    
    #Deleted associated Comments
    @comments = Comment.find(:all, :conditions => "commentable_id = #{params[:id]} AND commentable_type = 'Contract'")
    @comments.each {|x| x.destroy}
    
    respond_to do |format|
      format.html { redirect_to(contracts_url) }
      format.xml  { head :ok }
    end
  end

  protected
  def authorized?
    current_user.has_role?(:admin) || not_authorized
  end

end
